#!/bin/bash -e
#
# SPDX-License-Identifier: BSD-3-Clause
#
# zusd shutdown script
#
# Copyright (C) 2018 NetApp, Inc.  All rights reserved.
#
# See module.c for LICENSE details.
#
# Authors:
#	Yigal Korman <yigalk@netapp.com>

ZUF_MOD=/usr/lib/zufs/extra/zuf.ko
ZUF_ROOT=/sys/fs/zuf

signal_apps()
{
	local signal=$1
	local mntdev=$2
	local pids

	if pids=$(/sbin/lsof -t ${mntdev}) ; then
		kill -s ${signal} ${pids}
	else
		echo "No apps founds"
	fi
}

unload_libfs()
{
	local libfs=$1
	local mntdevs mntdev

	mntdevs=$(/bin/grep ${libfs} /proc/self/mounts | /bin/cut -d" " -f1)

	for mntdev in ${mntdevs} ; do
		signal_apps SIGTERM ${mntdev}
		sleep 1 # wait a bit for apps to stop
		signal_apps SIGKILL ${mntdev}
		/bin/umount -v -t ${libfs} ${mntdev}
		/sbin/fsck.${libfs} ${mntdev}
	done
}

unload_zusd()
{
	local timeout=60
	local pids

	# send sigterm to zusd
	if pids=$(pgrep -x zusd) ; then
		kill -s SIGTERM ${pids}
	fi

	# wait for zusd to terminate
	while pids=$(pgrep -x zusd) && [[ ${timeout} -gt 1 ]] ; do
		# if 'let' returns falsy value => bash exits, so count till 1
		let timeout-=1
		sleep 1
	done

	if [[ -n ${pids} ]] ; then
		echo "Warning: Failed to stop zusd, terminating forcibly"
		kill -s SIGKILL ${pids}
	fi
}

unload() {
	for libfs in ${ZUFS_LIBFS_LIST/,/ } ; do
		unload_libfs ${libfs}
	done

	unload_zusd

	/bin/umount -v -t zuf ${ZUF_ROOT}
	/sbin/rmmod -v zuf
}

load()
{
	# cleanup previous loads
	if /bin/grep -qw zuf /proc/self/mounts ; then
		unload
	fi

	# in case we booted a new kernel that isn't familiar with zuf
	# link it hoping the kernel ABI still matches
	if ! /sbin/modinfo zuf >/dev/null ; then
		/bin/ln -sf ${ZUF_MOD} /lib/modules/$(/bin/uname -r)/extra
		/sbin/depmod
	fi

	/sbin/modprobe -v zuf
	/bin/mount -v -t zuf nodev ${ZUF_ROOT}

	exec /sbin/zusd ${ZUSD_ARGS}
}

case $1 in
up)
	load
	;;
down)
	unload
	;;
*)
	echo "Unknown command!" >&2
	;;
esac
