#!/bin/bash -e
#
# SPDX-License-Identifier: BSD-3-Clause
#
# zusd shutdown script
#
# Copyright (C) 2018 NetApp, Inc.  All rights reserved.
#
# See module.c for LICENSE details.
#
# Authors:
#	Yigal Korman <yigalk@netapp.com>

ZUF_ROOT=/sys/fs/zuf

signal_apps()
{
	local signal=$1
	local mntdev=$2
	local pids

	if pids=$(lsof -t ${mntdev}) ; then
		kill -s ${signal} ${pids}
	else
		echo "No apps founds"
	fi
}

unload_libfs()
{
	local libfs=$1
	local mntdevs mntdev

	mntdevs=$(grep ${libfs} /proc/self/mounts | cut -d" " -f1)

	for mntdev in ${mntdevs} ; do
		signal_apps SIGTERM ${mntdev}
		sleep 1 # wait a bit for apps to stop
		signal_apps SIGKILL ${mntdev}
		umount -v -t ${libfs} ${mntdev}
		fsck.${libfs} ${mntdev}
	done
}

unload_zusd()
{
	local timeout=60
	local pids

	# send sigterm to zusd
	if pids=$(pgrep -x zusd) ; then
		kill -s SIGTERM ${pids}
	fi

	# wait for zusd to terminate
	while pids=$(pgrep -x zusd) && [[ ${timeout} -gt 1 ]] ; do
		# if 'let' returns falsy value => bash exits, so count till 1
		let timeout-=1
		sleep 1
	done

	if [[ -n ${pids} ]] ; then
		echo "Warning: Failed to stop zusd, terminating forcibly"
		kill -s SIGKILL ${pids}
	fi
}

unload() {
	for libfs in ${ZUFS_LIBFS_LIST/,/ } ; do
		unload_libfs ${libfs}
	done

	unload_zusd

	umount -v -t zuf ${ZUF_ROOT}
	rmmod -v zuf
}

load()
{
	local zuf_mod=/usr/lib/zufs/extra/zuf.ko
	local kver=$(uname -r)
	local kabi=$(echo ${kver} | sed -e 's|\([0-9.]*-[0-9]*\).*|\1|')
	local destdir

	# cleanup previous loads
	if grep -qw zuf /proc/self/mounts ; then
		unload
	fi

	source /etc/os-release

	if [[ "${ID}" == "centos" || "${ID}" == "rhel" ]] ; then
		destdir=/lib/modules/${kver}/extra
	else
		destdir=/lib/modules/${kver}/kernel/fs/zuf
	fi

	if [[ ! -d ${destdir} ]] ; then
		mkdir -p ${destdir}
	fi

	# in case we booted a new kernel that isn't familiar with zuf
	# link it hoping the kernel ABI still matches
	if ! modinfo zuf >/dev/null ; then
		ln -sf ${zuf_mod%.ko}.*${kabi}*.ko ${destdir}/zuf.ko
		depmod
	fi

	modprobe -v zuf
	mount -v -t zuf nodev ${ZUF_ROOT}

	exec /sbin/zusd ${ZUSD_ARGS}
}

case $1 in
up)
	load
	;;
down)
	unload
	;;
*)
	echo "Unknown command!" >&2
	;;
esac
