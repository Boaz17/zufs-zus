#!/bin/bash

# This is a helper utility file to support basic m1fs bringup and teardown.

EXAMPLE_CONF='
#!/bin/bash
# This is the do-m1 default configuration file.
# If you want to use a different file do:
#	./do-m1 -f other.conf [do-m1 params]
# The -f must be the very first parameter

# PLEASE edit below parameters to match your setup!!
DEV="/dev/pmem0"
DEV2="/dev/pmem1"
EXTRA_DEVS="--t1=/dev/pmem2"
EXTRA_SCRATCH_DEVS="--t1=/dev/pmem3"

# if T2_DEV0 is not empty then we have a T2 run
T2_DEV0=""
T2_DEV1=""

# mount options - if not empty then must end with a ','
DEF_MOUNT_OPT=""

# mkfs options - separated by space
# DEF_MKFS_OPT="--force"

GIT_REPO_DIR="/net/sagi-pc/home/sagi/dev"
GIT_REPO_NAME="zuf"
MKKERN_DIR="/root/dev/mkkern"
# this is for the -O .build_xxx param to mkkernel and friends
# BUILD=".build_vm_xxx"
# MKKERN_O="-O $BUILD"

# xfstest stuff
XFS_TEST="quick"

# Probably PLEASE do not edit these
MOUNT_POINT="/mnt/foo"
MOUNT_SCRATCH="/mnt/foo-scratch"
FSES="/etc/filesystems"

# Performance
BLOCKSIZE="4096 8192 16384 32768 65536 131072 262144 524288 1048576"
THREADS="1 2 4 8 16"
RES_HOST="10.0.0.11"
'

ZUF="zuf"
M1FS_MOD=fs/zuf/zuf.ko
base_dir=`dirname $0`
ZU_CONF="$base_dir/zu.conf"
MKFS_UTIL="mkfs.m1fs"

ZUF_ROOT_MNT="/sys/fs/zuf"

# ##### See if to use zu.conf or a "-f filename"
if [ "$1" == "-f" ]; then
	ZU_CONF="$(dirname $2)/$(basename $2)" # add the ./ if not specified
	shift 2
else
	if ! [ -e $ZU_CONF ]; then
		# First run after clone, need to edit the configuration files
		echo "$EXAMPLE_CONF" > $ZU_CONF
		echo "Please edit $ZU_CONF and re-run"
		exit 3
	fi
fi
source $ZU_CONF

if [ "$1" == "--t1-only" ]; then
	T2_DEV0=""
	shift
fi

# ##### dbgon channels XXXX
DEBUGFS_CONTROL_FILE="/sys/kernel/debug/dynamic_debug/control"

do_pr_debug_on()
{
	RESOLUTION=$1
	shift

	case $RESOLUTION in
	list)
		cat $DEBUGFS_CONTROL_FILE
		;;
	all)
		echo -n "module $ZUF +p" > $DEBUGFS_CONTROL_FILE
		;;
	channels)
		for c in $@;
		do
			echo -n "module $ZUF format "\"$c\"" +p" > $DEBUGFS_CONTROL_FILE
		done
		;;
	*)
		echo -n "module $ZUF "\"$@\"" +p" > $DEBUGFS_CONTROL_FILE ;;
	esac
}

do_pr_debug_off()
{
	echo -n "-p" > $DEBUGFS_CONTROL_FILE
}

# ### utils ###
drop_caches() {
	echo 3 > /proc/sys/vm/drop_caches
	foo_umount || true
	foo_mount
}
m1fs_make_known()
{
	sudo cp "$FSES" "$FSES-old"
	sudo sed -i '1s/^/'$ZUF'\n/' $FSES
}

is_mounted()
{
	local _MNT_POINT=$1

	cat /proc/mounts | grep $_MNT_POINT > /dev/null
	if [[ $? != 0 ]]; then
		return 0
	fi
	return 1
}

# 1 ####
pmem_up()
{
	modprobe pmem
}
pmem_down()
{
	modprobe -r pmem
}

# 2 ####
m1fs_mkfs()
{
	local OPT="$DEF_MKFS_OPT"
	local MOUNT_DEV="$DEV"
	if [ -n "$EXTRA_DEVS" ]; then
		OPT="$OPT $EXTRA_DEVS"
	fi
	if [ -n "$T2_DEV0" ]; then
		OPT="$OPT --t1=$DEV"
		MOUNT_DEV="$T2_DEV0"
	fi

	dd if=/dev/zero of=/dev/pmem0 bs=1M count=3
	dd if=/dev/zero of=/dev/pmem2 bs=1M count=3
	
	$MKFS_UTIL $OPT $MOUNT_DEV || return 1
}

##
# How to dbg a KVM
# ~~~~~~~~~~~~~~~~
# That XML magic searched-oto
#   <qemu:commandline>
#     <qemu:arg value='-s'/>
#   </qemu:commandline>
# </domain>
# gdb> target remote:1234	- attach to the KVM
# gdb> add-symbo		- file: Paste the below output in gdb
# gdb> b panic			- to trap opps as they happen
#

# 3 ####
zuf_insmod()
{
	modprobe $ZUF
	$base_dir/add-symbol-file $GIT_REPO_DIR/$GIT_REPO_NAME/$M1FS_MOD
}
zuf_rmmod()
{
	modprobe -r $ZUF
}

# 4 ####
zuf_root_mount()
{
	mount -t $ZUF nodev $ZUF_ROOT_MNT
}
zuf_root_umount()
{
	is_mounted $ZUF_ROOT_MNT || umount $ZUF_ROOT_MNT
}

# 5 ####
do_zus_up()
{
	$base_dir/../zus/zus $ZUF_ROOT_MNT &
}
do_zus_down()
{
	killall -2 zus
# 	killall zus
}
do_zus_coredump()
{
	# To see core-dump pattern:
	#   $ /usr/sbin/sysctl kernel.core_pattern
	# To disable core-dump via abrt hook:      
	#   $ sudo systemctl disable --now abrt-ccpp 
        # If you want the core file itself:
	#   $ coredumpctl dump $(realpath $base_dir/../zus/zus) -o <COREFILE>
	# But in most cases, we just want:
	coredumpctl dump $(realpath $base_dir/../zus/zus)
}

# 6 ####
FOOFS="foof"
foo_mount()
{
	local MOUNT_OPT="-o $DEF_MOUNT_OPT,$@,"
	local MOUNT_DEV="$DEV"
	if [ -n "$T2_DEV0" ]; then
		MOUNT_DEV="$T2_DEV0"
	fi

	mkdir -p $MOUNT_POINT

	echo "mounting -t $FOOFS $MOUNT_OPT $MOUNT_DEV $MOUNT_POINT"
	mount -t $FOOFS $MOUNT_OPT $MOUNT_DEV $MOUNT_POINT || return 1
}
foo_umount()
{
	is_mounted $MOUNT_POINT || umount $MOUNT_POINT
	is_mounted $MOUNT_SCRATCH || umount $MOUNT_SCRATCH
}

# ####
do_up()
{
# 	pmem_up

	m1fs_mkfs

	zuf_insmod
	zuf_root_mount
	do_zus_up

	sleep 4
	foo_mount $@
}

do_down()
{
	foo_umount

	do_zus_down
	zuf_root_umount
	zuf_rmmod

# 	pmem_down
}

do_clean()
{
	do_down
	echo "----"
	cd $GIT_REPO_DIR/$GIT_REPO_NAME
	$MKKERN_DIR/update-mods $MKKERN_O
	echo "----"
}

do_again()
{
	do_clean
	echo "++++++++++++++++++++++++++($(date))+++++++++++++++++++++++++++ " | logger
	do_up $@
}

source "$base_dir/fn-tests.sh"

do_cmd=$1
shift
case $do_cmd in
# ~~~~~~ pmem ~~~~~~
pmem-up)
	pmem_up
	;;
pmem-down)
	pmem_down
	;;

# ~~~~~~ mkfs ~~~~~~
mkfs)
	m1fs_mkfs $@
	;;

# ~~~~~~ up and running ~~~~~~
zuf-insmod)
	zuf_insmod
	;;
zuf-rmmod)
	zuf_rmmod
	;;

zuf-root)
	zuf_root_mount
	;;
zuf-unroot)
	zuf_root_umount
	;;

zus-up)
	do_zus_up
	;;
zus-down)
	do_zus_down
	;;
zus-coredump)
	do_zus_coredump
	;;

mount)
	zuf_insmod
	foo_mount $@
	;;
umount)
	foo_umount || true
	;;
remount)
	foo_umount || true
	foo_mount $@
	;;

up)
	do_up $@
	;;
down)
	do_down
	;;
	
again)
	do_again $@
	;;
clean)
	do_clean $@
	;;

# ~~~~~~ testing ~~~~~~
xfstest)
	do_xfstest $@
	;;
loop-xfstest)
	do_loop_xfstest $@
	;;

xfs-again)
	do_xfs_again $@
	;;
xfs-xfstest)
	do_xfs_xfstest $@
	;;

ptk)
	do_ptk $@
	;;
ptk-write-read-verify)
	do_ptk_write_read_verify
	;;
check-git)
	do_check_git $@
	;;
check_mktree)
	do_check_mktree
	;;
perf)
	do_perf $@
	;;
smoke)
	do_git_compile $@
	;;

# ~~~~~~ dbg prints ~~~~~~
dbgon)
	do_pr_debug_on $@
	;;
dbgoff)
	do_pr_debug_off
	;;

dd)
	my_dd  $@
	;;
# ~~~~~~ NOT YET ~~~~~~
*)
	echo "!!
	what [$*]??
	"
	;;
esac
